{
  "repoID": "407064515",
  "repoName": "Closure_98",
  "fileID": "43ab523091a041c69e44edaf66fe72c5",
  "index": 3,
  "status": "MODIFIED",
  "fileType": "JAVA",
  "baseRelativePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "currentRelativePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "baseContent": "",
  "currentContent": "",
  "description": "modified",
  "diffHunksMap": {
    "34c7b9fb14c445ad8c45816f207e281a": {
      "repoID": "407064515",
      "repoName": "Closure_98",
      "fileID": "43ab523091a041c69e44edaf66fe72c5",
      "diffHunkID": "34c7b9fb14c445ad8c45816f207e281a",
      "fileIndex": 3,
      "index": 1,
      "baseHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 353,
        "endLine": 354,
        "version": "BASE",
        "contentType": "CODE",
        "codeSnippet": [
          "    boolean isAssignedOnce() {",
          "      boolean assigned = false;"
        ]
      },
      "currentHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 354,
        "endLine": 378,
        "version": "CURRENT",
        "contentType": "CODE",
        "codeSnippet": [
          "    boolean isAssignedOnceInLifetime() {",
          "      Reference ref = getOneAndOnlyAssignment();",
          "      if (ref == null) {",
          "        return false;",
          "      }",
          "",
          "      // Make sure this assignment is not in a loop.",
          "      for (BasicBlock block = ref.getBasicBlock();",
          "           block != null; block = block.getParent()) {",
          "        if (block.isFunction) {",
          "          break;",
          "        } else if (block.isLoop) {",
          "          return false;",
          "        }",
          "      }",
          "",
          "      return true;",
          "    }",
          "",
          "    /**",
          "     * @return The one and only assignment. Returns if there are 0 or 2+",
          "     *    assignments.",
          "     */",
          "    private Reference getOneAndOnlyAssignment() {",
          "      Reference assignment = null;"
        ]
      },
      "fileType": "JAVA",
      "changeType": "MODIFIED",
      "description": "Update MethodDeclaration \"isAssignedOnce\" To: \"isAssignedOnceInLifetime\".\nUpdate VariableDeclarationStatement \"assigned\" To Block.\n",
      "rawDiffs": [
        "@@ -353,2 +354,25 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {",
        "-    boolean isAssignedOnce() {",
        "-      boolean assigned = false;",
        "+    boolean isAssignedOnceInLifetime() {",
        "+      Reference ref = getOneAndOnlyAssignment();",
        "+      if (ref == null) {",
        "+        return false;",
        "+      }",
        "+",
        "+      // Make sure this assignment is not in a loop.",
        "+      for (BasicBlock block = ref.getBasicBlock();",
        "+           block != null; block = block.getParent()) {",
        "+        if (block.isFunction) {",
        "+          break;",
        "+        } else if (block.isLoop) {",
        "+          return false;",
        "+        }",
        "+      }",
        "+",
        "+      return true;",
        "+    }",
        "+",
        "+    /**",
        "+     * @return The one and only assignment. Returns if there are 0 or 2+",
        "+     *    assignments.",
        "+     */",
        "+    private Reference getOneAndOnlyAssignment() {",
        "+      Reference assignment = null;"
      ]
    },
    "e3eefebd731641168364953103f5173f": {
      "repoID": "407064515",
      "repoName": "Closure_98",
      "fileID": "43ab523091a041c69e44edaf66fe72c5",
      "diffHunkID": "e3eefebd731641168364953103f5173f",
      "fileIndex": 3,
      "index": 5,
      "baseHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 456,
        "endLine": 456,
        "version": "BASE",
        "contentType": "COMMENT",
        "codeSnippet": [
          "    * @return For an assignment, variable declaration, or function declaration "
        ]
      },
      "currentHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 480,
        "endLine": 480,
        "version": "CURRENT",
        "contentType": "COMMENT",
        "codeSnippet": [
          "    * @return For an assignment, variable declaration, or function declaration"
        ]
      },
      "fileType": "JAVA",
      "changeType": "MODIFIED",
      "description": "Update Comment.\n",
      "rawDiffs": [
        "@@ -456 +480 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {",
        "-    * @return For an assignment, variable declaration, or function declaration ",
        "+    * @return For an assignment, variable declaration, or function declaration"
      ]
    },
    "1068b9839fe147f7b73348c6611b4d8d": {
      "repoID": "407064515",
      "repoName": "Closure_98",
      "fileID": "43ab523091a041c69e44edaf66fe72c5",
      "diffHunkID": "1068b9839fe147f7b73348c6611b4d8d",
      "fileIndex": 3,
      "index": 2,
      "baseHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 359,
        "endLine": 360,
        "version": "BASE",
        "contentType": "CODE",
        "codeSnippet": [
          "          if (!assigned) {",
          "            assigned = true;"
        ]
      },
      "currentHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 383,
        "endLine": 384,
        "version": "CURRENT",
        "contentType": "CODE",
        "codeSnippet": [
          "          if (assignment == null) {",
          "            assignment = ref;"
        ]
      },
      "fileType": "JAVA",
      "changeType": "MODIFIED",
      "description": "Update PrefixExpression To InfixExpression.\nUpdate Assignment.\n",
      "rawDiffs": [
        "@@ -359,2 +383,2 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {",
        "-          if (!assigned) {",
        "-            assigned = true;",
        "+          if (assignment == null) {",
        "+            assignment = ref;"
      ]
    },
    "ec37a148b5e14413812cf42cade56b67": {
      "repoID": "407064515",
      "repoName": "Closure_98",
      "fileID": "43ab523091a041c69e44edaf66fe72c5",
      "diffHunkID": "ec37a148b5e14413812cf42cade56b67",
      "fileIndex": 3,
      "index": 7,
      "baseHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 535,
        "endLine": 534,
        "version": "BASE",
        "contentType": "EMPTY",
        "codeSnippet": []
      },
      "currentHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 570,
        "endLine": 580,
        "version": "CURRENT",
        "contentType": "CODE",
        "codeSnippet": [
          "",
          "      this.isFunction = root.getType() == Token.FUNCTION;",
          "",
          "      if (root.getParent() != null) {",
          "        int pType = root.getParent().getType();",
          "        this.isLoop = pType == Token.DO ||",
          "            pType == Token.WHILE ||",
          "            pType == Token.FOR;",
          "      } else {",
          "        this.isLoop = false;",
          "      }"
        ]
      },
      "fileType": "JAVA",
      "changeType": "ADDED",
      "description": "Add ExpressionStatement \"this.isFunction=root.getType() == Token.FUNCTION;\".\nAdd InfixExpression.\nAdd Block.\nAdd ExpressionStatement \"this.isLoop=false;\".\n",
      "rawDiffs": [
        "@@ -535,0 +570,11 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {",
        "+",
        "+      this.isFunction = root.getType() == Token.FUNCTION;",
        "+",
        "+      if (root.getParent() != null) {",
        "+        int pType = root.getParent().getType();",
        "+        this.isLoop = pType == Token.DO ||",
        "+            pType == Token.WHILE ||",
        "+            pType == Token.FOR;",
        "+      } else {",
        "+        this.isLoop = false;",
        "+      }"
      ]
    },
    "d69b23aaa19445c3bae731a7e5884160": {
      "repoID": "407064515",
      "repoName": "Closure_98",
      "fileID": "43ab523091a041c69e44edaf66fe72c5",
      "diffHunkID": "d69b23aaa19445c3bae731a7e5884160",
      "fileIndex": 3,
      "index": 0,
      "baseHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 351,
        "endLine": 351,
        "version": "BASE",
        "contentType": "COMMENT",
        "codeSnippet": [
          "     * @return Whether the variable is only assigned a value once."
        ]
      },
      "currentHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 351,
        "endLine": 352,
        "version": "CURRENT",
        "contentType": "COMMENT",
        "codeSnippet": [
          "     * @return Whether the variable is only assigned a value once for its",
          "     *     lifetime."
        ]
      },
      "fileType": "JAVA",
      "changeType": "MODIFIED",
      "description": "Update Comment.\n",
      "rawDiffs": [
        "@@ -351 +351,2 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {",
        "-     * @return Whether the variable is only assigned a value once.",
        "+     * @return Whether the variable is only assigned a value once for its",
        "+     *     lifetime."
      ]
    },
    "825e77773225427b8256c7d1336258ff": {
      "repoID": "407064515",
      "repoName": "Closure_98",
      "fileID": "43ab523091a041c69e44edaf66fe72c5",
      "diffHunkID": "825e77773225427b8256c7d1336258ff",
      "fileIndex": 3,
      "index": 3,
      "baseHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 362,
        "endLine": 362,
        "version": "BASE",
        "contentType": "CODE",
        "codeSnippet": [
          "            return false;"
        ]
      },
      "currentHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 386,
        "endLine": 386,
        "version": "CURRENT",
        "contentType": "CODE",
        "codeSnippet": [
          "            return null;"
        ]
      },
      "fileType": "JAVA",
      "changeType": "MODIFIED",
      "description": "Update BooleanLiteral To NullLiteral.\n",
      "rawDiffs": [
        "@@ -362 +386 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {",
        "-            return false;",
        "+            return null;"
      ]
    },
    "6a838e828f994e5ea171de243d8eace2": {
      "repoID": "407064515",
      "repoName": "Closure_98",
      "fileID": "43ab523091a041c69e44edaf66fe72c5",
      "diffHunkID": "6a838e828f994e5ea171de243d8eace2",
      "fileIndex": 3,
      "index": 6,
      "baseHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 525,
        "endLine": 524,
        "version": "BASE",
        "contentType": "EMPTY",
        "codeSnippet": []
      },
      "currentHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 550,
        "endLine": 559,
        "version": "CURRENT",
        "contentType": "CODE",
        "codeSnippet": [
          "    /**",
          "     * Whether this block denotes a function scope.",
          "     */",
          "    private final boolean isFunction;",
          "",
          "    /**",
          "     * Whether this block denotes a loop.",
          "     */",
          "    private final boolean isLoop;",
          ""
        ]
      },
      "fileType": "JAVA",
      "changeType": "ADDED",
      "description": "Add FieldDeclaration \"isFunction\".\nAdd FieldDeclaration \"isLoop\".\n",
      "rawDiffs": [
        "@@ -525,0 +550,10 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {",
        "+    /**",
        "+     * Whether this block denotes a function scope.",
        "+     */",
        "+    private final boolean isFunction;",
        "+",
        "+    /**",
        "+     * Whether this block denotes a loop.",
        "+     */",
        "+    private final boolean isLoop;",
        "+"
      ]
    },
    "40439edf6f64446abc76e82a15f33741": {
      "repoID": "407064515",
      "repoName": "Closure_98",
      "fileID": "43ab523091a041c69e44edaf66fe72c5",
      "diffHunkID": "40439edf6f64446abc76e82a15f33741",
      "fileIndex": 3,
      "index": 4,
      "baseHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 366,
        "endLine": 366,
        "version": "BASE",
        "contentType": "CODE",
        "codeSnippet": [
          "      return assigned;"
        ]
      },
      "currentHunk": {
        "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "startLine": 390,
        "endLine": 390,
        "version": "CURRENT",
        "contentType": "CODE",
        "codeSnippet": [
          "      return assignment;"
        ]
      },
      "fileType": "JAVA",
      "changeType": "MODIFIED",
      "description": "Update ReturnStatement.\n",
      "rawDiffs": [
        "@@ -366 +390 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {",
        "-      return assigned;",
        "+      return assignment;"
      ]
    }
  },
  "rawHeaders": [
    "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
    "index 1e4b0ae9..da4ed3e0 100644",
    "--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
    "+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java"
  ]
}