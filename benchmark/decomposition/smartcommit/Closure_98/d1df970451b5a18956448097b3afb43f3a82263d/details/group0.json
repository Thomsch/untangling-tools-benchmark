FEATURE
feature: Add or modify feature ...
------------
1:0
Update MethodInvocation.

{
  "relativeFilePath": "src/com/google/javascript/jscomp/CollapseProperties.java",
  "startLine": 217,
  "endLine": 217,
  "version": "BASE",
  "contentType": "CODE",
  "codeSnippet": [
    "          && aliasRefs.isAssignedOnce()) {"
  ]
}
{
  "relativeFilePath": "src/com/google/javascript/jscomp/CollapseProperties.java",
  "startLine": 217,
  "endLine": 217,
  "version": "CURRENT",
  "contentType": "CODE",
  "codeSnippet": [
    "          && aliasRefs.isAssignedOnceInLifetime()) {"
  ]
}
------------
3:1
Update MethodDeclaration "isAssignedOnce" To: "isAssignedOnceInLifetime".
Update VariableDeclarationStatement "assigned" To Block.

{
  "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "startLine": 353,
  "endLine": 354,
  "version": "BASE",
  "contentType": "CODE",
  "codeSnippet": [
    "    boolean isAssignedOnce() {",
    "      boolean assigned = false;"
  ]
}
{
  "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "startLine": 354,
  "endLine": 378,
  "version": "CURRENT",
  "contentType": "CODE",
  "codeSnippet": [
    "    boolean isAssignedOnceInLifetime() {",
    "      Reference ref = getOneAndOnlyAssignment();",
    "      if (ref == null) {",
    "        return false;",
    "      }",
    "",
    "      // Make sure this assignment is not in a loop.",
    "      for (BasicBlock block = ref.getBasicBlock();",
    "           block != null; block = block.getParent()) {",
    "        if (block.isFunction) {",
    "          break;",
    "        } else if (block.isLoop) {",
    "          return false;",
    "        }",
    "      }",
    "",
    "      return true;",
    "    }",
    "",
    "    /**",
    "     * @return The one and only assignment. Returns if there are 0 or 2+",
    "     *    assignments.",
    "     */",
    "    private Reference getOneAndOnlyAssignment() {",
    "      Reference assignment = null;"
  ]
}
------------
3:6
Add FieldDeclaration "isFunction".
Add FieldDeclaration "isLoop".

{
  "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "startLine": 525,
  "endLine": 524,
  "version": "BASE",
  "contentType": "EMPTY",
  "codeSnippet": []
}
{
  "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "startLine": 550,
  "endLine": 559,
  "version": "CURRENT",
  "contentType": "CODE",
  "codeSnippet": [
    "    /**",
    "     * Whether this block denotes a function scope.",
    "     */",
    "    private final boolean isFunction;",
    "",
    "    /**",
    "     * Whether this block denotes a loop.",
    "     */",
    "    private final boolean isLoop;",
    ""
  ]
}
------------
3:7
Add ExpressionStatement "this.isFunction=root.getType() == Token.FUNCTION;".
Add InfixExpression.
Add Block.
Add ExpressionStatement "this.isLoop=false;".

{
  "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "startLine": 535,
  "endLine": 534,
  "version": "BASE",
  "contentType": "EMPTY",
  "codeSnippet": []
}
{
  "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "startLine": 570,
  "endLine": 580,
  "version": "CURRENT",
  "contentType": "CODE",
  "codeSnippet": [
    "",
    "      this.isFunction = root.getType() == Token.FUNCTION;",
    "",
    "      if (root.getParent() != null) {",
    "        int pType = root.getParent().getType();",
    "        this.isLoop = pType == Token.DO ||",
    "            pType == Token.WHILE ||",
    "            pType == Token.FOR;",
    "      } else {",
    "        this.isLoop = false;",
    "      }"
  ]
}
------------
2:2
Update PrefixExpression.

{
  "relativeFilePath": "src/com/google/javascript/jscomp/InlineVariables.java",
  "startLine": 428,
  "endLine": 428,
  "version": "BASE",
  "contentType": "CODE",
  "codeSnippet": [
    "      if (!refInfo.isAssignedOnce()) {"
  ]
}
{
  "relativeFilePath": "src/com/google/javascript/jscomp/InlineVariables.java",
  "startLine": 428,
  "endLine": 428,
  "version": "CURRENT",
  "contentType": "CODE",
  "codeSnippet": [
    "      if (!refInfo.isAssignedOnceInLifetime()) {"
  ]
}
------------
4:0
Add MethodDeclaration "testInlineAliasesInLoop".
Add MethodDeclaration "testNoInlineAliasesInLoop".

{
  "relativeFilePath": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
  "startLine": 595,
  "endLine": 594,
  "version": "BASE",
  "contentType": "EMPTY",
  "codeSnippet": []
}
{
  "relativeFilePath": "test/com/google/javascript/jscomp/InlineVariablesTest.java",
  "startLine": 596,
  "endLine": 627,
  "version": "CURRENT",
  "contentType": "CODE",
  "codeSnippet": [
    "  public void testInlineAliasesInLoop() {",
    "    test(",
    "        \"function f() { \" +",
    "        \"  var x = extern();\" +",
    "        \"  for (var i = 0; i < 5; i++) {\" +",
    "        \"    (function() {\" +",
    "        \"       var y = x; window.setTimeout(function() { extern(y); }, 0);\" +",
    "        \"     })();\" +",
    "        \"  }\" +",
    "        \"}\",",
    "        \"function f() { \" +",
    "        \"  var x = extern();\" +",
    "        \"  for (var i = 0; i < 5; i++) {\" +",
    "        \"    (function() {\" +",
    "        \"       window.setTimeout(function() { extern(x); }, 0);\" +",
    "        \"     })();\" +",
    "        \"  }\" +",
    "        \"}\");",
    "  }",
    "",
    "  public void testNoInlineAliasesInLoop() {",
    "    testSame(",
    "        \"function f() { \" +",
    "        \"  for (var i = 0; i < 5; i++) {\" +",
    "        \"    var x = extern();\" +",
    "        \"    (function() {\" +",
    "        \"       var y = x; window.setTimeout(function() { extern(y); }, 0);\" +",
    "        \"     })();\" +",
    "        \"  }\" +",
    "        \"}\");",
    "  }",
    ""
  ]
}
------------
2:0
Update MethodInvocation.

{
  "relativeFilePath": "src/com/google/javascript/jscomp/InlineVariables.java",
  "startLine": 181,
  "endLine": 181,
  "version": "BASE",
  "contentType": "CODE",
  "codeSnippet": [
    "              referenceInfo.isAssignedOnce()) {"
  ]
}
{
  "relativeFilePath": "src/com/google/javascript/jscomp/InlineVariables.java",
  "startLine": 181,
  "endLine": 181,
  "version": "CURRENT",
  "contentType": "CODE",
  "codeSnippet": [
    "              referenceInfo.isAssignedOnceInLifetime()) {"
  ]
}
------------
2:1
Update MethodInvocation.

{
  "relativeFilePath": "src/com/google/javascript/jscomp/InlineVariables.java",
  "startLine": 273,
  "endLine": 273,
  "version": "BASE",
  "contentType": "CODE",
  "codeSnippet": [
    "          referenceInfo.isAssignedOnce()) {"
  ]
}
{
  "relativeFilePath": "src/com/google/javascript/jscomp/InlineVariables.java",
  "startLine": 273,
  "endLine": 273,
  "version": "CURRENT",
  "contentType": "CODE",
  "codeSnippet": [
    "          referenceInfo.isAssignedOnceInLifetime()) {"
  ]
}
------------
3:2
Update PrefixExpression To InfixExpression.
Update Assignment.

{
  "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "startLine": 359,
  "endLine": 360,
  "version": "BASE",
  "contentType": "CODE",
  "codeSnippet": [
    "          if (!assigned) {",
    "            assigned = true;"
  ]
}
{
  "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "startLine": 383,
  "endLine": 384,
  "version": "CURRENT",
  "contentType": "CODE",
  "codeSnippet": [
    "          if (assignment == null) {",
    "            assignment = ref;"
  ]
}
------------
3:0
Update Comment.

{
  "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "startLine": 351,
  "endLine": 351,
  "version": "BASE",
  "contentType": "COMMENT",
  "codeSnippet": [
    "     * @return Whether the variable is only assigned a value once."
  ]
}
{
  "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "startLine": 351,
  "endLine": 352,
  "version": "CURRENT",
  "contentType": "COMMENT",
  "codeSnippet": [
    "     * @return Whether the variable is only assigned a value once for its",
    "     *     lifetime."
  ]
}
------------
3:3
Update BooleanLiteral To NullLiteral.

{
  "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "startLine": 362,
  "endLine": 362,
  "version": "BASE",
  "contentType": "CODE",
  "codeSnippet": [
    "            return false;"
  ]
}
{
  "relativeFilePath": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
  "startLine": 386,
  "endLine": 386,
  "version": "CURRENT",
  "contentType": "CODE",
  "codeSnippet": [
    "            return null;"
  ]
}
